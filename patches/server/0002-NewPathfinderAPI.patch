From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zimzaza4 <3625282098@qq.com>
Date: Sat, 3 Aug 2024 00:21:33 +0800
Subject: [PATCH] NewPathfinderAPI


diff --git a/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java b/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
index 946cbc955683e81933e0f3c0db5f8cc4ec437a76..291ab86287e8c3a87f276f3db3b261bd9b80bf9f 100644
--- a/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
+++ b/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.entity;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
+import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
@@ -9,8 +10,11 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.pathfinder.Node;
 import net.minecraft.world.level.pathfinder.Path;
+import re.imc.marigold.pathfinder.PathType;
+
 import java.util.ArrayList;
 import java.util.List;
+import java.util.function.Function;
 
 public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinder {
 
@@ -99,6 +103,11 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
         entity.getNavigation().pathFinder.nodeEvaluator.setCanFloat(canFloat);
     }
 
+    @Override
+    public void setCanPassHandler(Function<Block, PathType> handler) {
+        entity.getNavigation().pathFinder.nodeEvaluator.setCanPassHandler(handler);
+    }
+
     public class PaperPathResult implements com.destroystokyo.paper.entity.PaperPathfinder.PathResult {
 
         private final Path path;
diff --git a/src/main/java/net/minecraft/world/level/PathNavigationRegion.java b/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
index 30d19ae31fe29436482b3fbe146dc6238b1fd04b..e0faa777996f855fdb2c866ccbedf9fa4243dd5a 100644
--- a/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
+++ b/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
@@ -156,4 +156,10 @@ public class PathNavigationRegion implements BlockGetter, CollisionGetter {
         return net.minecraft.util.profiling.InactiveProfiler.INSTANCE; // Gale - Purpur - remove vanilla profiler
     }
     // Leaf end - Redirect to fix plugin incompatibility
+
+    //Marigold start
+    public Level level() {
+        return level;
+    }
+    //Marigold stop
 }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
index 03fef01b9801cfa1c365f9b490c203a29f94cbea..e1d4f8c7c6a1853b85dcb0945fc52d45231e6ccd 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
@@ -10,6 +10,9 @@ import net.minecraft.world.level.PathNavigationRegion;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.block.Block;
+
+import java.util.function.Function;
 
 public abstract class NodeEvaluator {
     protected PathfindingContext currentContext;
@@ -22,6 +25,7 @@ public abstract class NodeEvaluator {
     protected boolean canOpenDoors;
     protected boolean canFloat;
     protected boolean canWalkOverFences;
+    protected Function<Block, re.imc.marigold.pathfinder.PathType> canPassHandler = block -> re.imc.marigold.pathfinder.PathType.DEFAULT;
 
     public void prepare(PathNavigationRegion cachedWorld, Mob entity) {
         this.currentContext = new PathfindingContext(cachedWorld, entity);
@@ -75,6 +79,10 @@ public abstract class NodeEvaluator {
         this.canFloat = canSwim;
     }
 
+    public void setCanPassHandler(Function<Block, re.imc.marigold.pathfinder.PathType> canPassHandler) {
+        this.canPassHandler = canPassHandler;
+    }
+
     public void setCanWalkOverFences(boolean canWalkOverFences) {
         this.canWalkOverFences = canWalkOverFences;
     }
@@ -95,6 +103,10 @@ public abstract class NodeEvaluator {
         return this.canWalkOverFences;
     }
 
+    public Function<Block, re.imc.marigold.pathfinder.PathType> getCanPassHandler() {
+        return canPassHandler;
+    }
+
     public static boolean isBurningBlock(BlockState state) {
         return state.is(BlockTags.FIRE)
             || state.is(Blocks.LAVA)
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathTypeCache.java b/src/main/java/net/minecraft/world/level/pathfinder/PathTypeCache.java
index b01d44d8403d2691db5c7dbc148f1dd3fdb4d8a3..c54d5d4e2895493458e4a4d46fa7009721951c86 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathTypeCache.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathTypeCache.java
@@ -11,11 +11,15 @@ public class PathTypeCache {
     private final long[] positions = new long[4096];
     private final PathType[] pathTypes = new PathType[4096];
 
-    public PathType getOrCompute(BlockGetter world, BlockPos pos) {
+    public PathType getOrCompute(BlockGetter world, BlockPos pos, @Nullable NodeEvaluator evaluator) {
         long l = pos.asLong();
         int i = index(l);
         PathType pathType = this.get(i, l);
-        return pathType != null ? pathType : this.compute(world, pos, i, l);
+        return pathType != null ? pathType : this.compute(world, pos, i, l, evaluator);
+    }
+
+    public PathType getOrCompute(BlockGetter world, BlockPos pos) {
+        return getOrCompute(world, pos, null);
     }
 
     @Nullable
@@ -23,13 +27,17 @@ public class PathTypeCache {
         return this.positions[index] == pos ? this.pathTypes[index] : null;
     }
 
-    private PathType compute(BlockGetter world, BlockPos pos, int index, long longPos) {
-        PathType pathType = WalkNodeEvaluator.getPathTypeFromState(world, pos);
+    private PathType compute(BlockGetter world, BlockPos pos, int index, long longPos, @Nullable NodeEvaluator evaluator) { // Marigold
+        PathType pathType = WalkNodeEvaluator.getPathTypeFromState(world, pos, evaluator);
         this.positions[index] = longPos;
         this.pathTypes[index] = pathType;
         return pathType;
     }
 
+    private PathType compute(BlockGetter world, BlockPos pos, int index, long longPos) {
+        return compute(world, pos, index, longPos, null);
+    }
+
     public void invalidate(BlockPos pos) {
         long l = pos.asLong();
         int i = index(l);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfindingContext.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfindingContext.java
index 9b7f962df041f1b437a983c48337e35cfeb14744..2478e362b5792914af98c1b905d4ccb2e470c423 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathfindingContext.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfindingContext.java
@@ -13,6 +13,7 @@ public class PathfindingContext {
     private final PathTypeCache cache;
     private final BlockPos mobPosition;
     private final BlockPos.MutableBlockPos mutablePos = new BlockPos.MutableBlockPos();
+    private final NodeEvaluator evaluator;
 
     public PathfindingContext(CollisionGetter world, Mob entity) {
         this.level = world;
@@ -23,11 +24,12 @@ public class PathfindingContext {
         }
 
         this.mobPosition = entity.blockPosition();
+        this.evaluator = entity.getNavigation().getNodeEvaluator();
     }
 
     public PathType getPathTypeFromState(int x, int y, int z) {
         BlockPos blockPos = this.mutablePos.set(x, y, z);
-        return this.cache == null ? WalkNodeEvaluator.getPathTypeFromState(this.level, blockPos) : this.cache.getOrCompute(this.level, blockPos);
+        return this.cache == null ? WalkNodeEvaluator.getPathTypeFromState(this.level, blockPos, evaluator) : this.cache.getOrCompute(this.level, blockPos, evaluator);
     }
 
     public BlockState getBlockState(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index f26383cf896785333dbd6f86348d5a5f67a6731f..73d3ed1388647a55b7d874db96b5f080ed6a285b 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -6,6 +6,7 @@ import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
 import java.util.EnumSet;
 import java.util.Set;
+import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -14,6 +15,7 @@ import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.PathNavigationRegion;
 import net.minecraft.world.level.block.BaseRailBlock;
 import net.minecraft.world.level.block.Block;
@@ -27,6 +29,7 @@ import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.block.CraftBlock;
 
 public class WalkNodeEvaluator extends NodeEvaluator {
     public static final double SPACE_BETWEEN_WALL_POSTS = 0.5;
@@ -477,13 +480,31 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         return fallback;
     }
 
-    protected static PathType getPathTypeFromState(BlockGetter world, BlockPos pos) {
+    protected static PathType getPathTypeFromState(BlockGetter world, BlockPos pos, @Nullable NodeEvaluator evaluator) {
         // Paper start - Do not load chunks during pathfinding
         BlockState blockState = world.getBlockStateIfLoaded(pos);
         if (blockState == null) {
             return PathType.BLOCKED;
         }
         // Paper end
+        // Marigold start
+        if (evaluator != null) {
+            LevelAccessor accessor = null;
+            if (world instanceof LevelAccessor) {
+                accessor = (LevelAccessor) world;
+            }
+            if (world instanceof PathNavigationRegion region) {
+                accessor = region.level();
+            }
+            if (accessor != null) {
+                CraftBlock bblock = CraftBlock.at(accessor, pos);
+                switch (evaluator.canPassHandler.apply(bblock)) {
+                    case OPEN -> {return PathType.OPEN;}
+                    case BLOCKED -> {return PathType.BLOCKED;}
+                }
+            }
+        }
+        // Marigold end
         Block block = blockState.getBlock();
         if (blockState.isAir()) {
             return PathType.OPEN;
@@ -528,4 +549,8 @@ public class WalkNodeEvaluator extends NodeEvaluator {
             return PathType.DAMAGE_CAUTIOUS;
         }
     }
+
+    protected static PathType getPathTypeFromState(BlockGetter world, BlockPos pos) {
+        return getPathTypeFromState(world, pos, null);
+    }
 }
